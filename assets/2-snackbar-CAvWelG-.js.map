{"version":3,"file":"2-snackbar-CAvWelG-.js","sources":["../../src/js/2-snackbar.js"],"sourcesContent":["// Напиши скрипт, який після сабміту форми створює проміс.\n\n// *В середині колбека цього промісу через вказану користувачем кількість мілісекунд проміс має виконуватися(при fulfilled) або відхилятися(при rejected), залежно від обраної опції в радіокнопках.\n\n// *Значенням промісу, яке передається як аргумент у методи resolve / reject, має бути значення затримки в мілісекундах.\n\n// *Створений проміс треба опрацювати у відповідних для вдалого/невдалого виконання методах.\n\n// *Якщо проміс виконується вдало, виводь у консоль наступний рядок, де delay — це значення затримки виклику промісу в мілісекундах.\n\n//* `✅ Fulfilled promise in ${delay}ms`\n\n// *Якщо проміс буде відхилено, то виводь у консоль наступний рядок, де delay — це значення затримки промісу в мілісекундах.\n\n// *`❌ Rejected promise in ${delay}ms`;\n//-----------------------------------------------------------------------------------------------------------------------------\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst form = document.querySelector('.form');\nconst delayEl = form.querySelector(\"input[name='delay']\"); //введене значення затримки\n// const stateEl = form.querySelector(\"input[name='state']\");\n\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(event) {\n  event.preventDefault();\n\n  // Отримуємо значення з поля введення та перетворюємо його в число\n  const delayValue = parseInt(delayEl.value);\n\n  // Отримуємо обраний стан з радіокнопок\n  const btnState = event.currentTarget.elements.state.value;\n\n  // console.log(btnState);\n\n  // Створюємо новий проміс\n  const promise = new Promise((resolve, reject) => {\n    // Встановлюємо таймер\n    setTimeout(() => {\n      //перевіряємо стан обраної кнопки\n      if (btnState === 'fulfilled') {\n        resolve(delayValue);\n      } else if (btnState === 'rejected') {\n        reject(delayValue);\n      }\n    }, delayValue);\n  });\n\n  //обробляємо проміс\n  promise\n    .then(delay => {\n      iziToast.show({\n        title: 'Fulfilled promise',\n        message: `✅ Fulfilled promise in ${delay}ms`,\n\n        messageColor: '#FFF',\n        titleColor: '#FFF',\n\n        backgroundColor: '#59A10D',\n        borderBottom: '2px solid #ffbebe',\n        borderRadius: '4px',\n        padding: '20px',\n        width: '383px',\n        height: '64px',\n        timeout: 5000,\n        closeOnClick: true,\n      });\n    })\n    .catch(delay => {\n      iziToast.show({\n        title: 'Rejected promise',\n        message: `❌ Rejected promise in ${delay}ms`,\n\n        messageColor: '#FFF',\n        titleColor: '#FFF',\n\n        backgroundColor: '#ef4040',\n        borderBottom: '2px solid #ffbebe',\n        borderRadius: '4px',\n        padding: '20px',\n        width: '302px',\n        height: '64px',\n        timeout: 5000,\n        closeOnClick: true,\n      });\n    });\n}\n"],"names":["form","delayEl","onSubmit","event","delayValue","btnState","resolve","reject","delay","iziToast"],"mappings":"yCAoBA,MAAMA,EAAO,SAAS,cAAc,OAAO,EACrCC,EAAUD,EAAK,cAAc,qBAAqB,EAGxDA,EAAK,iBAAiB,SAAUE,CAAQ,EAExC,SAASA,EAASC,EAAO,CACvBA,EAAM,eAAgB,EAGtB,MAAMC,EAAa,SAASH,EAAQ,KAAK,EAGnCI,EAAWF,EAAM,cAAc,SAAS,MAAM,MAKpC,IAAI,QAAQ,CAACG,EAASC,IAAW,CAE/C,WAAW,IAAM,CAEXF,IAAa,YACfC,EAAQF,CAAU,EACTC,IAAa,YACtBE,EAAOH,CAAU,CAEpB,EAAEA,CAAU,CACjB,CAAG,EAIE,KAAKI,GAAS,CACbC,EAAS,KAAK,CACZ,MAAO,oBACP,QAAS,0BAA0BD,CAAK,KAExC,aAAc,OACd,WAAY,OAEZ,gBAAiB,UACjB,aAAc,oBACd,aAAc,MACd,QAAS,OACT,MAAO,QACP,OAAQ,OACR,QAAS,IACT,aAAc,EACtB,CAAO,CACF,CAAA,EACA,MAAMA,GAAS,CACdC,EAAS,KAAK,CACZ,MAAO,mBACP,QAAS,yBAAyBD,CAAK,KAEvC,aAAc,OACd,WAAY,OAEZ,gBAAiB,UACjB,aAAc,oBACd,aAAc,MACd,QAAS,OACT,MAAO,QACP,OAAQ,OACR,QAAS,IACT,aAAc,EACtB,CAAO,CACP,CAAK,CACL"}